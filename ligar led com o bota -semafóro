#include "main.h"
#include "FreeRTOS.h"
#include "task.h"
#include "semphr.h"
#include "slpman_qcx212.h"
#include "pad_qcx212.h"
#include "HT_gpio_qcx212.h"
#include "ic_qcx212.h"
#include "HT_ic_qcx212.h"

// Configurações do Hardware
#define BUTTON_INSTANCE          0
#define BUTTON_PIN               10
#define BUTTON_PAD_ID            25
#define BUTTON_PAD_ALT_FUNC      PAD_MuxAlt0

#define LED_INSTANCE             0
#define LED_GPIO_PIN             3
#define LED_PAD_ID               14
#define LED_PAD_ALT_FUNC         PAD_MuxAlt0

// Parâmetros do Sistema
#define DEBOUNCE_DELAY_MS       50   // Debounce de 50ms
#define POLLING_DELAY_MS        10   // Polling a cada 10ms
#define PRIORIDADE_TASKS        1    // Prioridade igual para ambas tasks

SemaphoreHandle_t xSemaforo;         // Semáforo binário

static void HT_GPIO_InitButton(void) {
    GPIO_InitType GPIO_InitStruct = {0};
    GPIO_InitStruct.af = BUTTON_PAD_ALT_FUNC;
    GPIO_InitStruct.pad_id = BUTTON_PAD_ID;
    GPIO_InitStruct.gpio_pin = BUTTON_PIN;
    GPIO_InitStruct.pin_direction = GPIO_DirectionInput;
    GPIO_InitStruct.pull = PAD_InternalPullUp;
    GPIO_InitStruct.instance = BUTTON_INSTANCE;
    GPIO_InitStruct.exti = GPIO_EXTI_DISABLED;
    GPIO_InitStruct.interrupt_config = GPIO_InterruptFallingEdge;
    HT_GPIO_Init(&GPIO_InitStruct);
}

static void HT_GPIO_InitLed(void) {
    GPIO_InitType GPIO_InitStruct = {0};
    GPIO_InitStruct.af = LED_PAD_ALT_FUNC;
    GPIO_InitStruct.pad_id = LED_PAD_ID;
    GPIO_InitStruct.gpio_pin = LED_GPIO_PIN;
    GPIO_InitStruct.pin_direction = GPIO_DirectionOutput;
    GPIO_InitStruct.init_output = 0;
    GPIO_InitStruct.pull = PAD_AutoPull;
    GPIO_InitStruct.instance = LED_INSTANCE;
    GPIO_InitStruct.exti = GPIO_EXTI_DISABLED;
    HT_GPIO_Init(&GPIO_InitStruct);
}

void Task1(void *pvParameters) {
    int button_value, last_value = 0;
    while(1) {
        button_value = HT_GPIO_PinRead(BUTTON_INSTANCE, BUTTON_PIN);
        if (button_value != last_value) {
            xSemaphoreGive(xSemaforo); // Libera o semáforo
            last_value = button_value;
            printf("Botão: %d\n", button_value);
            vTaskDelay(pdMS_TO_TICKS(DEBOUNCE_DELAY_MS)); // Debounce
        }
        vTaskDelay(pdMS_TO_TICKS(POLLING_DELAY_MS)); // Polling
    }
}

void Task2(void *pvParameters) {
    while(1) {
        if (xSemaphoreTake(xSemaforo, portMAX_DELAY) == pdTRUE) {
            int estado = HT_GPIO_PinRead(BUTTON_INSTANCE, BUTTON_PIN);
            HT_GPIO_WritePin(LED_GPIO_PIN, LED_INSTANCE, estado);
            printf("LED: %d\n", estado);
        }
    }
}

void main_entry(void) {
    HT_GPIO_InitButton();
    HT_GPIO_InitLed();
    slpManNormalIOVoltSet(IOVOLT_3_30V);

    #ifdef USE_USART_DEBUG
    printf("Sistema Iniciado\n");
    #endif

    // Cria semáforo binário
    xSemaforo = xSemaphoreCreateBinary();
    if (xSemaforo == NULL) {
        printf("Erro ao criar semáforo!\n");
        while(1);
    }

    // Cria tasks com mesma prioridade
    xTaskCreate(Task1, "TaskBotao", 128, NULL, PRIORIDADE_TASKS, NULL);
    xTaskCreate(Task2, "TaskLED", 128, NULL, PRIORIDADE_TASKS, NULL);

    vTaskStartScheduler();

    while(1);
}
tudo em baixo disso é para melhor entendimento
//Valor original: 50ms


vTaskDelay(pdMS_TO_TICKS(DEBOUNCE_DELAY_MS)); // Debounce
Cenários Possíveis:
Valor do Debounce	Efeito no Sistema
Aumentar (ex: 100ms)	- Vantagem: Filtra mais ruídos (mais confiável).
- Desvantagem: O botão parece "lento" (demora para responder após pressionado).
Diminuir (ex: 20ms)	- Vantagem: Resposta mais rápida do botão.
- Desvantagem: Risco de registros falsos (flicker do LED).
Zerar (0ms)	- Sem filtro: LED pode piscar várias vezes com um único toque (ruído mecânico é lido como eventos reais).
2. Alterando o Tempo de Polling (POLLING_DELAY_MS)
Valor original: 10ms

c
vTaskDelay(pdMS_TO_TICKS(POLLING_DELAY_MS)); // Polling
Cenários Possíveis:
Valor do Polling	Efeito no Sistema
Aumentar (ex: 50ms)	- Vantagem: Economiza CPU (menos verificações).
- Desvantagem: Pode perder pressionamentos rápidos (ex: toque de <50ms).
Diminuir (ex: 5ms)	- Vantagem: Detecta pressionamentos muito curtos.
- Desvantagem: Aumenta o uso da CPU (menos eficiente).
Zerar (0ms)	- Esgota a CPU: A Task1 fica em loop infinito, bloqueando outras tarefas (sistema travado).
